name: Robust Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # --- Configuration ---
            # The absolute path to your project directory on the server.
            # !! IMPORTANT: Change this if your username is not 'ubuntu24' !!
            PROJECT_DIR="/home/ubuntu24/my-api"
            
            # The repository URL is automatically constructed from GitHub context.
            REPO_URL="https://github.com/${{ github.repository }}.git"
            
            # --- Automation Script Starts ---
            echo ">>> Starting deployment process..."
            
            # Step 1: Check for project directory and clone or pull accordingly.
            if [ -d "$PROJECT_DIR" ]; then
              echo ">>> Project directory exists. Pulling latest changes..."
              cd "$PROJECT_DIR"
              git pull
            else
              echo ">>> Project directory not found. Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_DIR"
              cd "$PROJECT_DIR"
            fi
            
            echo ">>> Successfully changed directory to: $(pwd)"

            # Step 2: Check for the virtual environment and create it if it doesn't exist.
            if [ ! -d "venv" ]; then
              echo ">>> Virtual environment not found. Creating a new one..."
              python3 -m venv venv
            fi
            
            # Step 3: Activate the virtual environment and install dependencies.
            echo ">>> Activating virtual environment and installing requirements..."
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Step 4: Ensure tmux is installed.
            # tmux is a terminal multiplexer that will run our app in a persistent background session.
            if ! command -v tmux &> /dev/null; then
                echo ">>> tmux not found. Installing it..."
                # The user running this script needs sudo permissions for this part.
                sudo apt-get update
                sudo apt-get install -y tmux
            fi
            
            # Step 5: Start or restart the application using tmux.
            echo ">>> Restarting the application within a tmux session..."
            # Kill any existing tmux session with the same name to ensure a clean start.
            tmux kill-session -t my-api || true
            
            # Start a new detached tmux session named 'my-api'.
            # We directly call the python interpreter from our virtual environment. This is more robust.
            tmux new-session -d -s my-api "venv/bin/python app.py"
            
            # Add a small delay to allow the session to stabilize or fail.
            sleep 2
            
            # Verify that the tmux session is running. This will help with debugging.
            echo ">>> Verifying tmux session status:"
            tmux ls
            
            echo ">>> Deployment finished successfully!"

