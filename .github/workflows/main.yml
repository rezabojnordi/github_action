name: Robust Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # --- Configuration ---
            # The absolute path to your project directory on the server.
            # !! IMPORTANT: Change this if your username is not 'ubuntu24' !!
            PROJECT_DIR="/home/ubuntu24/my-api"
            
            # The repository URL is automatically constructed from GitHub context.
            REPO_URL="https://github.com/${{ github.repository }}.git"
            
            # --- Automation Script Starts ---
            echo ">>> Starting deployment process..."
            
            # Step 1: Check for project directory and clone or pull accordingly.
            if [ -d "$PROJECT_DIR" ]; then
              echo ">>> Project directory exists. Pulling latest changes..."
              cd "$PROJECT_DIR"
              git pull
            else
              echo ">>> Project directory not found. Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_DIR"
              cd "$PROJECT_DIR"
            fi
            
            echo ">>> Successfully changed directory to: $(pwd)"

            # Step 2: Check for the virtual environment and create it if it doesn't exist.
            if [ ! -d "venv" ]; then
              echo ">>> Virtual environment not found. Creating a new one..."
              python3 -m venv venv
            fi
            
            # Step 3: Activate the virtual environment and install dependencies.
            echo ">>> Activating virtual environment and installing requirements..."
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Step 4: Install or update PM2, a production process manager.
            # This is more reliable than nohup. It requires Node.js and npm.
            if ! command -v pm2 &> /dev/null; then
                echo ">>> PM2 not found. Installing Node.js and PM2..."
                # The user running this script needs sudo permissions for this part.
                sudo apt-get update
                sudo apt-get install -y nodejs npm
                sudo npm install pm2 -g
            fi
            
            # Step 5: Start or restart the application using PM2.
            echo ">>> Restarting the application with PM2..."
            # This command will start the app if it's not running, or restart it if it is.
            # Using the full path to the python interpreter ensures we use the one from our venv.
            pm2 restart app.py --name my-api --interpreter venv/bin/python || pm2 start app.py --name my-api --interpreter venv/bin/python
            
            echo ">>> Deployment finished successfully!"

