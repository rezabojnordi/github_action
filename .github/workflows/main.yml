name: Professional CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # --- Test Job ---
  # This job runs first. It installs dependencies and runs automated tests.
  # The deployment job will only start if this job succeeds.
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run tests with pytest
        run: pytest

  # --- Deploy Job ---
  # This job runs only after the 'test' job has completed successfully.
  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # --- Configuration ---
            PROJECT_DIR="/home/ubuntu24/my-api"
            REPO_URL="https://github.com/${{ github.repository }}.git"
            
            # --- Automation Script Starts ---
            echo ">>> Starting deployment process..."
            
            # Step 1: Clone or pull the repository.
            if [ -d "$PROJECT_DIR" ]; then
              echo ">>> Project directory exists. Pulling latest changes..."
              cd "$PROJECT_DIR"
              git pull
            else
              echo ">>> Project directory not found. Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_DIR"
              cd "$PROJECT_DIR"
            fi
            
            # Step 2: Create or update the virtual environment.
            if [ ! -d "venv" ]; then
              echo ">>> Virtual environment not found. Creating..."
              python3 -m venv venv
            fi
            
            # Step 3: Install dependencies from the requirements.txt file.
            echo ">>> Activating virtual environment and installing requirements..."
            source venv/bin/activate
            # Ensure Werkzeug is compatible with Flask 2.2.x
            pip install Werkzeug==2.3.8
            pip install -r requirements.txt
            
            # Step 4: Ensure tmux is installed.
            if ! command -v tmux &> /dev/null; then
                echo ">>> tmux not found. Installing it..."
                sudo apt-get update
                sudo apt-get install -y tmux
            fi
            
            # Step 5: Restart the application in a tmux session, logging output.
            echo ">>> Restarting the application within a tmux session..."
            tmux kill-session -t my-api || true
            tmux new-session -d -s my-api "venv/bin/python app.py > app.log 2>&1"
            
            sleep 3 # Give the app a moment to start up.
            
            # Step 6: Verify and check logs.
            echo ">>> Verifying tmux session status:"
            tmux ls
            echo ">>> Displaying the last 20 lines of the application log for debugging:"
            tail -n 20 app.log || echo "Log file is empty or does not exist."
            
            echo ">>> Deployment finished."

